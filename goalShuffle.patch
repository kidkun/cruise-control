diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalOptimizer.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalOptimizer.java
index 661b49f..a175580 100644
--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalOptimizer.java
+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalOptimizer.java
@@ -21,6 +21,7 @@ import com.linkedin.kafka.cruisecontrol.monitor.ModelGeneration;
 import com.linkedin.kafka.cruisecontrol.monitor.MonitorUtils;
 import com.linkedin.kafka.cruisecontrol.monitor.task.LoadMonitorTaskRunner;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -38,6 +39,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
+import java.util.stream.IntStream;
 import org.apache.kafka.common.TopicPartition;
 import org.apache.kafka.common.utils.Time;
 import org.slf4j.Logger;
@@ -92,11 +94,13 @@ public class GoalOptimizer implements Runnable {
         _defaultModelCompletenessRequirements.minMonitoredPartitionsPercentage(),
         _defaultModelCompletenessRequirements.includeAllTopics());
     _goalByPriorityForPrecomputing = new ArrayList<>();
-    _numPrecomputingThreads = config.getInt(KafkaCruiseControlConfig.NUM_PROPOSAL_PRECOMPUTE_THREADS_CONFIG);
+    SortedMap<Integer, Goal> defaultGoal = AnalyzerUtils.getGoalMapByPriority(config);
+    _numPrecomputingThreads = Math.min(config.getInt(KafkaCruiseControlConfig.NUM_PROPOSAL_PRECOMPUTE_THREADS_CONFIG),
+                                      IntStream.range(1, defaultGoal.size()).reduce(1, (a, b) -> a * b));
     // Need at least one computing thread.
-    for (int i = 0; i < numProposalComputingThreads(); i++) {
-      _goalByPriorityForPrecomputing.add(AnalyzerUtils.getGoalMapByPriority(config));
-    }
+    //if precompute using multiple threads,randomize the goal order
+    generateGoals(defaultGoal);
+
     LOG.info("Goals by priority: {}", _goalsByPriority);
     LOG.info("Goals by priority for proposal precomputing: {}", _goalByPriorityForPrecomputing);
     _balancingConstraint = new BalancingConstraint(config);
@@ -117,6 +121,26 @@ public class GoalOptimizer implements Runnable {
     _proposalComputationTimer = dropwizardMetricRegistry.timer(MetricRegistry.name("GoalOptimizer", "proposal-computation-timer"));
   }
 
+  private void generateGoals(SortedMap<Integer, Goal> defaultGoal) {
+    List<Goal> goals = IntStream.range(1, defaultGoal.size()).mapToObj(defaultGoal::get).collect(Collectors.toList());
+    Set<List<Integer>> priorities = new HashSet<>();
+    _goalByPriorityForPrecomputing.add(defaultGoal);
+    while (priorities.size() < numProposalComputingThreads() - 1) {
+      List<Integer> shuffledOrder = IntStream.range(0, defaultGoal.size()).boxed().collect(Collectors.toList());
+      Collections.shuffle(shuffledOrder);
+      priorities.add(shuffledOrder);
+    }
+      for (List<Integer> priority: priorities) {
+        SortedMap<Integer, Goal> shuffledGoals = new TreeMap<>();
+        int i = 0;
+        for (Integer p:priority) {
+          shuffledGoals.put(p, goals.get(i++));
+        }
+        _goalByPriorityForPrecomputing.add(shuffledGoals);
+      }
+  }
+
+
   @Override
   public void run() {
     // We need to get this thread so it can be interrupted if the cached proposal has been invalidated.
diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalShuffleTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalShuffleTest.java
new file mode 100644
index 0000000..d49f735
--- /dev/null
+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalShuffleTest.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the "License"). See License in the project root for license information.
+ */
+
+package com.linkedin.kafka.cruisecontrol.analyzer;
+
+import com.codahale.metrics.MetricRegistry;
+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControlUnitTestUtils;
+import com.linkedin.kafka.cruisecontrol.analyzer.goals.Goal;
+import com.linkedin.kafka.cruisecontrol.common.TestConstants;
+import com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfig;
+import java.lang.reflect.Field;
+import java.util.List;
+import java.util.Properties;
+import java.util.SortedMap;
+import org.apache.kafka.common.utils.SystemTime;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static org.junit.Assert.*;
+
+
+public class GoalShuffleTest {
+
+  private static final Logger LOG = LoggerFactory.getLogger(GoalShuffleTest.class);
+
+  @Test
+  public void testGoalGetShuffled() {
+
+    Properties props = KafkaCruiseControlUnitTestUtils.getKafkaCruiseControlProperties();
+    props.setProperty(KafkaCruiseControlConfig.NUM_PROPOSAL_PRECOMPUTE_THREADS_CONFIG, Long.toString(5));
+    BalancingConstraint balancingConstraint = new BalancingConstraint(new KafkaCruiseControlConfig(props));
+    balancingConstraint.setResourceBalancePercentage(TestConstants.LOW_BALANCE_PERCENTAGE);
+    balancingConstraint.setCapacityThreshold(TestConstants.MEDIUM_CAPACITY_THRESHOLD);
+
+    LOG.trace("config applied is {}", props);
+    GoalOptimizer goalOptimizer = new GoalOptimizer(new KafkaCruiseControlConfig(balancingConstraint.setProps(props)),
+        null,
+        new SystemTime(),
+        new MetricRegistry());
+    try {
+      Field field = goalOptimizer.getClass().getDeclaredField("_goalByPriorityForPrecomputing");
+      field.setAccessible(true);
+      List<SortedMap<Integer, Goal>> randomizedGoal = (List<SortedMap<Integer, Goal>>) field.get(goalOptimizer);
+      LOG.trace("generated goals are {}", randomizedGoal);
+      for (int i = 0; i < randomizedGoal.size() - 1; i++) {
+        for (int j = i + 1; j < randomizedGoal.size(); j++) {
+          assertNotEquals(randomizedGoal.get(i), randomizedGoal.get(j));
+        }
+      }
+    } catch (Exception e) {
+      e.printStackTrace();
+    }
+  }
+}
